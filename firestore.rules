/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a hierarchical data model based around Entrepot (warehouses), Tournee (delivery tours), and Tache (delivery tasks).
 *
 * Data Structure:
 * - /entrepots/{entrepotId}: Stores warehouse data.
 * - /entrepots/{entrepotId}/tournees/{tourneeId}: Stores delivery tour data for a specific warehouse.
 * - /entrepots/{entrepotId}/tournees/{tourneeId}/taches/{tacheId}: Stores delivery task data for a specific tour.
 * - /depots/{depotId}: Stores delivery depot data.
 * - /livreurs/{livreurId}: Stores delivery driver data.
 * - /suiviCommentaires/{suiviId}: Stores data of the follow-up action for a negative customer comment
 * - /commentCategories/{commentId}: Stores categorized comments
 *
 * Key Security Decisions:
 * - All collections require authentication to write.
 * - Listing of documents is allowed for all collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and write access to Entrepot documents.
     * @path /entrepots/{entrepotId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @principle Requires authentication for all writes. Allows public reads.
     */
    match /entrepots/{entrepotId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to Tournee documents within an Entrepot.
     * @path /entrepots/{entrepotId}/tournees/{tourneeId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @principle Requires authentication for all writes. Allows public reads.
     */
    match /entrepots/{entrepotId}/tournees/{tourneeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to Tache documents within a Tournee.
     * @path /entrepots/{entrepotId}/tournees/{tourneeId}/taches/{tacheId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @principle Requires authentication for all writes. Allows public reads.
     */
    match /entrepots/{entrepotId}/tournees/{tourneeId}/taches/{tacheId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to Depot documents.
     * @path /depots/{depotId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @principle Requires authentication for all writes. Allows public reads.
     */
    match /depots/{depotId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to Livreur documents.
     * @path /livreurs/{livreurId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @principle Requires authentication for all writes. Allows public reads.
     */
    match /livreurs/{livreurId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to SuiviCommentaire documents.
     * @path /suiviCommentaires/{suiviId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @principle Requires authentication for all writes. Allows public reads.
     */
    match /suiviCommentaires/{suiviId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to CommentCategory documents.
     * @path /commentCategories/{commentId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @principle Requires authentication for all writes. Allows public reads.
     */
    match /commentCategories/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}