/**
 * @fileoverview Firestore Security Rules for the delivery tracking application.
 *
 * Core Philosophy:
 * This ruleset employs a hierarchical ownership model, with Entrepots acting as the root owners of Tournees and Taches.
 * Livreurs and Depots are managed through top-level collections with owner-only write access.
 * SuiviCommentaires are open for reading to facilitate initial access, but require authentication and validation for modification.
 *
 * Data Structure:
 * - /entrepots/{entrepotId}: Collection of warehouses.
 * - /entrepots/{entrepotId}/tournees/{tourneeId}: Subcollection of delivery tours for each warehouse.
 * - /entrepots/{entrepotId}/tournees/{tourneeId}/taches/{tacheId}: Subcollection of tasks for each tour.
 * - /depots/{depotId}: Collection of delivery depots.
 * - /livreurs/{livreurId}: Collection of delivery drivers.
 * - /suiviCommentaires/{suiviId}: Collection for tracking actions on negative comments.
 *
 * Key Security Decisions:
 * - Unauthenticated list access is disallowed for all collections except SuiviCommentaires.
 * - Strict ownership is enforced for all write operations to prevent unauthorized data modification.
 * - Data consistency is validated on create and update operations to maintain relational integrity.
 * - The 'tourneeId' is assumed to contain composited data (nom de la tournée + date + entrepôt), which can reliably recreate the parent reference from any tache document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the entrepots collection.
     * @path /entrepots/{entrepotId}
     * @allow (get, list): Any authenticated user can read.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny: An unauthenticated user cannot write or list.
     * @principle: Requires authentication for all writes; public read access.
     */
    match /entrepots/{entrepotId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the tournees subcollection under each entrepot.
     * @path /entrepots/{entrepotId}/tournees/{tourneeId}
     * @allow (get, list): Any authenticated user can read.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny: An unauthenticated user cannot write or list.
     * @principle: Requires authentication for all writes; public read access.
     */
    match /entrepots/{entrepotId}/tournees/{tourneeId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the taches subcollection under each tournee.
     * @path /entrepots/{entrepotId}/tournees/{tourneeId}/taches/{tacheId}
     * @allow (get, list): Any authenticated user can read.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny: An unauthenticated user cannot write or list.
     * @principle: Requires authentication for all writes; public read access.
     */
    match /entrepots/{entrepotId}/tournees/{tourneeId}/taches/{tacheId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the depots collection.
     * @path /depots/{depotId}
     * @allow (get, list): Any authenticated user can read.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny: An unauthenticated user cannot write or list.
     * @principle: Requires authentication for all writes; public read access.
     */
    match /depots/{depotId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the livreurs collection.
     * @path /livreurs/{livreurId}
     * @allow (get, list): Any authenticated user can read.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny: An unauthenticated user cannot write or list.
     * @principle: Requires authentication for all writes; public read access.
     */
    match /livreurs/{livreurId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the suiviCommentaires collection.
     * @path /suiviCommentaires/{suiviId}
     * @allow (get, list): Any user can read the documents.
     * @allow (create, update, delete): Only authenticated users can write.
     * @deny: An unauthenticated user cannot write.
     * @principle: Public read access; authentication required for writes.
     */
    match /suiviCommentaires/{suiviId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}